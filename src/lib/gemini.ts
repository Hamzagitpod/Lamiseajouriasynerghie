import { GoogleGenerativeAI } from "@google/generative-ai";
import { Storage } from "@google-cloud/storage";
import * as pdf from "pdf-parse";
import Tesseract from "tesseract.js";

const storage = new Storage();

/**
 * üìò Lecture du Code du Travail depuis Cloud Storage
 * Essaie d'abord d'extraire le texte avec pdf-parse,
 * puis fait un OCR automatique si aucun texte n'est d√©tect√©.
 */
async function readLaborCodeFromBucket(): Promise<string> {
  try {
    const bucketName = "synerhgie-labor-laws";
    const fileName = "CODE DU TRAVAIL GUINEE.pdf";
    const file = storage.bucket(bucketName).file(fileName);

    const [buffer] = await file.download();
    console.log("‚úÖ PDF du Code du Travail t√©l√©charg√© depuis GCS.");

    // 1Ô∏è‚É£ Tentative classique de lecture du texte
    const data = await (pdf as any)(buffer);
    if (data.text && data.text.trim().length > 50) {
      console.log(`‚úÖ Texte extrait du PDF (mode texte), longueur: ${data.text.length}`);
      return data.text;
    }

    // 2Ô∏è‚É£ Si vide, passage en OCR (reconnaissance de texte sur images)
    console.log("‚ö†Ô∏è Aucun texte d√©tect√© ‚Äî tentative d‚Äôextraction OCR...");

    const { data: ocrResult } = await Tesseract.recognize(buffer, "fra");
    if (ocrResult && ocrResult.text) {
      console.log(`‚úÖ Texte extrait du PDF (mode OCR), longueur: ${ocrResult.text.length}`);
      return ocrResult.text;
    }

    console.log("‚ùå OCR termin√© mais aucun texte n‚Äôa pu √™tre extrait.");
    return "";
  } catch (error) {
    console.error("‚ùå Erreur lors de la lecture du PDF depuis GCS:", error);
    return "";
  }
}

/**
 * ‚öñÔ∏è Appelle l'API Gemini avec la question et le contexte issu du Code du Travail.
 */
export async function askGemini({
  apiKey,
  query,
  profile,
  systemPrompt,
  modelName = "gemini-2.5-pro",
}: {
  apiKey: string;
  query: string;
  profile?: string;
  systemPrompt?: string;
  modelName?: string;
}) {
  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({
      model: modelName,
      systemInstruction:
        systemPrompt ||
        `Tu es un assistant juridique expert du droit du travail guin√©en.
        Tu dois r√©pondre en t‚Äôappuyant avant tout sur le contenu du Code du Travail de Guin√©e (fourni dans le contexte ci-dessous).
        Si la question n‚Äôa pas de lien direct avec le travail, la loi, ou les droits du salari√©, tu peux r√©pondre bri√®vement
        en disant que ta sp√©cialit√© concerne le droit du travail guin√©en.
        Si la question est vague mais que tu peux la relier √† une notion juridique (ex: cong√©, contrat, s√©curit√©, employeur, etc.),
        tente de formuler une r√©ponse utile bas√©e sur le texte fourni.`,
      generationConfig: {
        temperature: 0.4,
        maxOutputTokens: 8192,
      },
    });

    // Lecture du Code du Travail depuis le bucket
    const codeText = await readLaborCodeFromBucket();
    console.log("‚úÖ Texte extrait du PDF charg√©, longueur:", codeText.length);

    // Construction du prompt
    const userPrompt = `
Contexte (extrait du Code du Travail de Guin√©e) :
${codeText.slice(0, 15000)}

Profil : ${profile || "non sp√©cifi√©"}

Question : ${query}
`;

    const result = await model.generateContent(userPrompt);
    const text = result.response.text();

    if (!text) return "Aucune r√©ponse textuelle n'a √©t√© g√©n√©r√©e.";
    return text;
  } catch (error) {
    console.error("‚ùå Erreur Gemini:", error);
    return "Erreur lors de la g√©n√©ration de la r√©ponse.";
  }
}
